import json
import os

from PyQt6.QtWidgets import QMainWindow, QMessageBox

from CSDL.models.UserInfor import UserInfor

from CSDL.libs.DataConnector import DataConnector
from CSDL.libs.JsonFileFactory import JsonFileFactory
from CSDL.models.Admin import Admin
from CSDL.models.User import User
from ui.login.login import Ui_MainWindow
from ui.user.UserInforExt import UserInforExt
from ui.user.UserUiExt import UserUiExt
from utils import resources_banner_rc
from utils import resources_poster_rc
from utils import resources_rc
from utils import resources_logo_rc


class LoginUiExt(Ui_MainWindow):
   def __init__(self):
       self.MainWindow = QMainWindow()
       self.setupUi(self.MainWindow)
       self.dc=DataConnector()

   def setupUi(self, MainWindow):
       super().setupUi(MainWindow)
       self.MainWindow = MainWindow
       self.MainWindow.ui = self

       self.stackedWidget.setCurrentWidget(self.LoginPage)


       # G√°n s·ª± ki·ªán click cho c√°c n√∫t chuy·ªÉn trang
       self.setupSignalAndSlot()

   def showWindow(self):
       self.MainWindow.show()
   def setupSignalAndSlot(self):
       """ G√°n s·ª± ki·ªán cho c√°c n√∫t ƒë·ªÉ chuy·ªÉn trang """
       self.pushButtonTo_Register.clicked.connect(self.showRegisterPage)
       self.pushButtonTo_Login.clicked.connect(self.showLoginPage)
       self.pushButtonRegister.clicked.connect(self.register_process)
       self.pushButtonLogin.clicked.connect(self.login_process)

   def showRegisterPage(self):
       """ Hi·ªÉn th·ªã trang ƒëƒÉng k√Ω """
       self.stackedWidget.setCurrentWidget(self.RegisterPage)

   def showLoginPage(self):
       """ Hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p """
       self.stackedWidget.setCurrentWidget(self.LoginPage)

   def clear_user_infor(self):
       self.lineEditUsername_Signup.setText("")
       self.lineEditPassword_Signup.setText("")
       self.lineEditConfirmPassword_Signup.setText("")
   dc = DataConnector()

   #X·ª≠ l√Ω ƒëƒÉng k√≠
   def register_process(self):
       Username = self.lineEditUsername_Signup.text()
       Password = self.lineEditPassword_Signup.text()
       ConfirmPassword = self.lineEditConfirmPassword_Signup.text()

       if not Username or not Password or not ConfirmPassword:
           msg = QMessageBox(self.MainWindow)
           msg.setIcon(QMessageBox.Icon.Warning)
           msg.setText("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
           msg.setWindowTitle("L·ªói")
           msg.exec()
           return


       if Password != ConfirmPassword:
           msg = QMessageBox(self.MainWindow)
           msg.setIcon(QMessageBox.Icon.Warning)
           msg.setText("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp. Vui l√≤ng th·ª≠ l·∫°i!")
           msg.setWindowTitle("L·ªói")
           msg.exec()
           self.lineEditConfirmPassword_Signup.setText("")
           return

       user = User(self.lineEditUsername_Signup.text(), self.lineEditConfirmPassword_Signup.text())
       index = self.dc.check_user_exist(user.Username)

       if index == -1:
           try:
               self.dc.save_account(user)
               msgbox = QMessageBox(self.MainWindow)
               msgbox.setIcon(QMessageBox.Icon.Information)
               msgbox.setText("T·∫°o t√†i kho·∫£n th√†nh c√¥ng.")
               msgbox.setWindowTitle("X√°c nh·∫≠n t·∫°o kho·∫£n th√†nh c√¥ng")
               msgbox.exec()
               self.clear_user_infor()


               Users_list = self.dc.get_all_users()
               if Users_list is None:
                   Users_list = []
               Users_list.append(User(Username, Password))  # Kh√¥ng c·∫ßn g√°n l·∫°i

               jff = JsonFileFactory()
               filename = "../dataset/user.json"
               jff.write_data(Users_list, filename)

           except Exception as e:
               msgbox = QMessageBox(self.MainWindow)
               msgbox.setIcon(QMessageBox.Icon.Critical)
               msgbox.setText(f"L·ªói khi l∆∞u t√†i kho·∫£n: {str(e)}")
               msgbox.setWindowTitle("L·ªói h·ªá th·ªëng")
               msgbox.exec()
       else:
           msg = QMessageBox(self.MainWindow)
           msg.setIcon(QMessageBox.Icon.Warning)
           msg.setText("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i. Vui l√≤ng t·∫°o t√†i kho·∫£n kh√°c")
           msg.setWindowTitle("L·ªói")
           msg.exec()
           self.clear_user_infor()

    #x·ª≠ l√Ω ƒëƒÉng nh·∫≠p
   def load_user_data(self, filename):
       """ ƒê·ªçc danh s√°ch t√†i kho·∫£n t·ª´ file JSON """
       jff = JsonFileFactory()
       users_list = jff.read_data(filename, UserInfor)
       if users_list is None:
           return []
       return users_list

   def load_admin_data(self, filename):
       """ ƒê·ªçc danh s√°ch t√†i kho·∫£n t·ª´ file JSON """
       jff = JsonFileFactory()
       admins_list = jff.read_data(filename, Admin)
       if admins_list is None:
           return []
       return admins_list

   def coivalidate_user(self, Username, Password):
       # X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc c·ªßa project
       project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../"))
       json_path = os.path.join(project_root, "dataset", "users_data.json")  # ƒê∆∞·ªùng d·∫´n ƒë√∫ng

       try:
           with open(json_path, "r", encoding="utf-8") as file:
               users = json.load(file)
       except FileNotFoundError:
           print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu user! File kh√¥ng t·ªìn t·∫°i: {json_path}")
           return None
       except json.JSONDecodeError:
           print("‚ùå L·ªñI: File JSON b·ªã l·ªói, kh√¥ng th·ªÉ ƒë·ªçc!")
           return None

       if not users:
           print("‚ùå L·ªñI: Danh s√°ch user r·ªóng!")
           return None

       for user in users:
           if user.get("Username") == Username and user.get("Password") == Password:
               print(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: {user}")  # Debug d·ªØ li·ªáu user
               return user  # Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin user
       return None

   def coivalidate_admin(self, Username, Password):
       admins = self.load_admin_data("../dataset/admin.json")  # L·∫•y danh s√°ch Admin t·ª´ h·ªá th·ªëng
       for a in admins:
           if a.Username == Username and a.Password == Password:
               return 1
       return 0

   def open_admin_ui(self):
       """ M·ªü giao di·ªán Admin """
       from ui.admin.AdminUiExt import AdminUiExt

       # self.MainWindow.close()  # ƒê√≥ng c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
       self.mainwindow = QMainWindow()
       self.myui = AdminUiExt()
       self.myui.setupUi(self.mainwindow)
       self.myui.showWindow()

   def open_user_ui(self, user_info):
       """ M·ªü giao di·ªán UserInfor v√† truy·ªÅn d·ªØ li·ªáu user """
       if not user_info:
           print("‚ùå L·ªñI: Kh√¥ng c√≥ d·ªØ li·ªáu user ƒë·ªÉ m·ªü giao di·ªán!")
           return

       print(f"üöÄ ƒêang m·ªü UserInforExt v·ªõi d·ªØ li·ªáu: {user_info}")

       from ui.user.UserUiExt import UserUiExt
       self.user_info_dialog = UserInforExt(user_info=user_info, user_ui_ext=self)

       try:
           print("üöÄ Hi·ªÉn th·ªã c·ª≠a s·ªï UserInforExt...")
           self.user_info_dialog.show()  # ƒê·ªïi t·ª´ exec() sang show() ƒë·ªÉ tr√°nh crash
       except Exception as e:
           print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ m·ªü UserInforExt - {e}")

       """ L·∫•y th√¥ng tin user t·ª´ file JSON v√† ƒëi·ªÅn v√†o c√°c lineEdit 
       filename = "../dataset/UserS.json"
       user_list = self.load_user_infor(filename)  # L·∫•y danh s√°ch user

       # T√¨m user theo username
       user_info = None
       for user in user_list:
           if user.Username == self.username:  # So s√°nh username
               user_info = user
               break  # D·ª´ng v√≤ng l·∫∑p khi t√¨m th·∫•y

       # N·∫øu t√¨m th·∫•y user th√¨ g√°n gi√° tr·ªã v√†o c√°c QLineEdit
       if user_info:
           self.ui.lineEdit.setText(str("nhuanh"))  # Username (String)
           self.ui.lineEdit_2.setText(str("Ph·∫°m L√™ Nh∆∞ Anh"))  # H·ªç v√† t√™n (String)
           self.ui.lineEdit_6.setText(str("20-5-2025"))  # Ng√†y sinh (String)
           self.ui.lineEdit_5.setText(str("0901030490"))  # S·ªë ƒëi·ªán tho·∫°i (String)
           self.ui.lineEdit_4.setText(str("NhuAnh@gmail.com"))  # Email (String)
       else:
           QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!")


"""

   def login_process(self):
       Username = self.lineEditUsername_Login.text().strip()
       Password = self.lineEditPassword_Login.text().strip()
       # Ki·ªÉm tra n·∫øu username ho·∫∑c password r·ªóng
       if not Username or not Password:
           msgbox = QMessageBox(self.MainWindow)
           msgbox.setIcon(QMessageBox.Icon.Critical)
           msgbox.setText(f"Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√†i kho·∫£n v√† m·∫≠t kh·∫©u!")
           msgbox.setWindowTitle("L·ªói h·ªá th·ªëng")
           msgbox.exec()
           return


       if self.checkBox.isChecked() and self.checkBox_2.isChecked():
           msgbox = QMessageBox(self.MainWindow)
           msgbox.setIcon(QMessageBox.Icon.Critical)
           msgbox.setText("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p c·∫£ hai quy·ªÅn c√πng l√∫c! Vui l√≤ng ch·ªçn m·ªôt.")
           msgbox.setWindowTitle("L·ªói h·ªá th·ªëng")
           msgbox.exec()
           return

       if self.checkBox.isChecked():
           user_info = self.coivalidate_user(Username, Password)  # Ki·ªÉm tra User

           if user_info:
               print(f"‚úÖ User h·ª£p l·ªá: {user_info}")  # Debug xem user c√≥ ƒë∆∞·ª£c x√°c th·ª±c kh√¥ng
               self.open_user_ui(user_info)  # Truy·ªÅn th√¥ng tin v√†o UserInforExt
           else:
               msgbox = QMessageBox(self.MainWindow)
               msgbox.setIcon(QMessageBox.Icon.Critical)
               msgbox.setText(f"T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!")
               msgbox.setWindowTitle("L·ªói h·ªá th·ªëng")
               msgbox.exec()

       # N·∫øu ch·ªçn ƒëƒÉng nh·∫≠p Admin
       elif self.checkBox_2.isChecked():
           Admin_list = self.load_admin_data("../dataset/admin.json")  # T·∫£i danh s√°ch admin

           admin = self.coivalidate_admin(Username,Password)
           if admin:
               self.open_admin_ui()
           else:
               msgbox = QMessageBox(self.MainWindow)
               msgbox.setIcon(QMessageBox.Icon.Critical)
               msgbox.setText(f"T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!")
               msgbox.setWindowTitle("L·ªói h·ªá th·ªëng")
               msgbox.exec()
   """def load_user_infor(filename):
        #ƒê·ªçc danh s√°ch user t·ª´ file JSON v√† tr·∫£ v·ªÅ danh s√°ch ƒë·ªëi t∆∞·ª£ng UserInfor 
       import json
       try:
           with open(filename, "r", encoding="utf-8") as file:
               data = json.load(file)  # ƒê·ªçc d·ªØ li·ªáu (danh s√°ch [])
               # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu kh√¥ng ph·∫£i danh s√°ch
               if not isinstance(data, list):
                   return []
               user_list = [
                   UserInfor(user["Username"], user["fullname"], user["birthday"], user["phone"], user["email"])
                   for user in data]
               return user_list
       except (FileNotFoundError, json.JSONDecodeError):
           return []"""
