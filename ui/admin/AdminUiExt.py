import json
import os

from PyQt6.QtWidgets import QMessageBox, QMainWindow, QTableWidgetItem
from PyQt6 import QtWidgets

from CSDL.libs.DataConnector import DataConnector
from CSDL.libs.JsonFileFactory import JsonFileFactory
from CSDL.models.Film import Film
from ui.admin.AdminUi import Ui_MainWindow
from ui.admin.MovieDetailExt import MovieDetailExt
from ui.admin.MovieCreateExt import MovieCreateExt
from ui.admin.MovieEditExt import MovieEditExt
from utils import resources_banner_rc
from utils import resources_poster_rc
from utils import resources_rc
from utils import resources_logo_rc

class AdminUiExt(Ui_MainWindow):
    def __init__(self):
        self.MainWindow = QMainWindow()  # T·∫°o m·ªôt QMainWindow m·ªõi
        self.setupUi(self.MainWindow)  # √Åp d·ª•ng giao di·ªán UI
        self.dc = DataConnector()
        # K·∫øt n·ªëi c√°c s·ª± ki·ªán
        self.setupSignalAndSlot()


    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.MainWindow = MainWindow
        self.MainWindow.ui = self

        self.setupSignalAndSlot()
        # C·∫•u h√¨nh b·∫£ng
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        # G√°n danh s√°ch phim m·∫´u

        self.movies = self.get_movies_list()

        # T·∫£i danh s√°ch phim l√™n b·∫£ng
        self.load_movies()

    def setupSignalAndSlot(self):
        """ K·∫øt n·ªëi c√°c n√∫t v·ªõi c√°c h·ªôp tho·∫°i """
        self.pushButtonDetails.clicked.connect(self.show_movie_details)
        self.pushButtonCreate.clicked.connect(self.show_movie_create)
        self.pushButtonEdit.clicked.connect(self.show_movie_edit)
        self.pushButtonDelete.clicked.connect(self.delete_movie)
        self.selected_row = -1
    def showWindow(self):
        """ Hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh """
        self.MainWindow.show()


    def get_movies_list(self):
        """ ƒê·ªçc danh s√°ch phim t·ª´ file JSON """
        file_path = "../dataset/film.json"

        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(file_path):
            print("‚ùå L·ªói: File d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i!")
            return []

        try:
            with open(file_path, "r", encoding="utf-8") as file:
                data = json.load(file)  # ƒê·ªçc JSON

                if isinstance(data, list):
                    return data  # Tr·∫£ v·ªÅ danh s√°ch phim

                print("‚ùå L·ªói: D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá!")
                return []
        except json.JSONDecodeError:
            print("‚ùå L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc file JSON!")
            return []

    def load_movies(self):
        """ Load danh s√°ch phim v√†o b·∫£ng """
        self.tableWidget.setRowCount(len(self.movies))  # C·∫≠p nh·∫≠t s·ªë d√≤ng trong b·∫£ng

        for row, movie in enumerate(self.movies):
            self.tableWidget.setItem(row, 0, QTableWidgetItem(movie["filmTitle"]))
            self.tableWidget.setItem(row, 1, QTableWidgetItem(movie["Gerne"]))
            self.tableWidget.setItem(row, 2, QTableWidgetItem(movie["Country"]))
            self.tableWidget.setItem(row, 3, QTableWidgetItem(movie["ReleaseDate"]))

            # ‚úÖ S·ª≠a l·ªói duration: √âp th√†nh chu·ªói n·∫øu l√† s·ªë
            self.tableWidget.setItem(row, 4, QTableWidgetItem(str(movie["Duration"])))


    def show_movie_details(self):
        """ Hi·ªÉn th·ªã c·ª≠a s·ªï chi ti·∫øt phim """
        selected_row = self.tableWidget.currentRow()
        print(f"Selected row: {selected_row}")  # Debug
        if selected_row == -1:
            QMessageBox.warning(self.MainWindow, "L·ªói", "Vui l√≤ng ch·ªçn m·ªôt b·ªô phim!")
            return
        movie = self.movies[selected_row]
        dialog = MovieDetailExt(movie, self.MainWindow)
        dialog.exec()

    '''def delete_movie(self):
        selected_row = self.tableWidget.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self.MainWindow, "L·ªói", "Vui l√≤ng ch·ªçn m·ªôt b·ªô phim!")
            return'''



    def show_movie_edit(self):
        """ Hi·ªÉn th·ªã c·ª≠a s·ªï ch·ªânh s·ª≠a phim """
        selected_row = self.tableWidget.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self.MainWindow, "L·ªói", "Vui l√≤ng ch·ªçn m·ªôt b·ªô phim!")
            return

        movie = self.movies[selected_row]
        dialog = MovieEditExt(movie, self.MainWindow)
        if dialog.exec():
            # C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi ch·ªânh s·ª≠a
            self.load_movies()

    def show_movie_create(self):
        """ Hi·ªÉn th·ªã c·ª≠a s·ªï t·∫°o phim m·ªõi """
        dialog = MovieCreateExt(self.MainWindow)
        if dialog.exec():
            # Th√™m phim m·ªõi v√†o danh s√°ch (n·∫øu c·∫ßn)
            new_movie = {
                "name": dialog.ui.lineEditTitle.text(),
                "author": dialog.ui.lineEditAuthor.text(),
                "genre": dialog.ui.lineEditGenre.text(),
                "country": dialog.ui.lineEditCountry.text(),
                "duration": dialog.ui.lineEditDuration.text(),
                "year": dialog.ui.lineEditYear.text(),
                "description": dialog.ui.textEditDescription.toPlainText(),
                "image": "default.jpg"
            }
            self.movies.append(new_movie)
            self.load_movies()

#c√°i n√†y t·ª•i t ch∆∞a s·ª≠a ƒë∆∞·ª£c
    def delete_movie(self):
        """ X√≥a b·ªô phim ƒëang ch·ªçn kh·ªèi danh s√°ch `self.movies` v√† c·∫≠p nh·∫≠t `film.json` """
        selected_row = self.tableWidget.currentRow()  # L·∫•y d√≤ng ƒë∆∞·ª£c ch·ªçn

        if selected_row == -1:
            QMessageBox.warning(self.MainWindow, "L·ªói", "Vui l√≤ng ch·ªçn m·ªôt b·ªô phim!")
            return

        # ‚úÖ L·∫•y `filmTitle` t·ª´ c·ªôt 0 c·ªßa b·∫£ng
        film_title = self.tableWidget.item(selected_row, 0).text().strip().lower()

        # ‚úÖ Debug: Ki·ªÉm tra gi√° tr·ªã `filmTitle` l·∫•y t·ª´ b·∫£ng
        print(f"üìå T√™n phim ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x√≥a: '{film_title}'")

        # ‚úÖ H·ªôp tho·∫°i x√°c nh·∫≠n xo√°
        dlg = QMessageBox(self.MainWindow)
        dlg.setWindowTitle("X√°c nh·∫≠n xo√°")
        dlg.setText(f'B·∫°n c√≥ ch·∫Øc mu·ªën xo√° "{film_title}" kh√¥ng?')
        dlg.setIcon(QMessageBox.Icon.Question)
        buttons = QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        dlg.setStandardButtons(buttons)
        button = dlg.exec()

        if button == QMessageBox.StandardButton.No:
            return  # Kh√¥ng l√†m g√¨ n·∫øu ch·ªçn No

        # ‚úÖ T√¨m phim c·∫ßn x√≥a trong `self.movies`
        movie_to_delete = None
        for movie in self.movies:
            json_film_title = movie.get("filmTitle", "").strip().lower()
            if json_film_title == film_title:
                movie_to_delete = movie
                break

        # ‚úÖ N·∫øu t√¨m th·∫•y phim th√¨ x√≥a, n·∫øu kh√¥ng b√°o l·ªói
        if movie_to_delete:
            self.movies.remove(movie_to_delete)  # X√≥a kh·ªèi danh s√°ch
            print(f"‚úÖ ƒê√£ t√¨m th·∫•y v√† x√≥a phim: {movie_to_delete['filmTitle']}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y phim c√≥ t√™n '{film_title}' ƒë·ªÉ x√≥a!")
            QMessageBox.warning(self.MainWindow, "L·ªói", f"Kh√¥ng t√¨m th·∫•y phim c√≥ t√™n '{film_title}' ƒë·ªÉ x√≥a!")
            return

        # ‚úÖ Ghi l·∫°i file JSON sau khi x√≥a
        jff = JsonFileFactory()
        filename = "../dataset/film.json"
        jff.write_data(self.movies, filename)  # Ghi l·∫°i danh s√°ch c·∫≠p nh·∫≠t

        # ‚úÖ C·∫≠p nh·∫≠t giao di·ªán
        self.load_movies()

        QMessageBox.information(self.MainWindow, "Th√†nh c√¥ng", f"ƒê√£ x√≥a b·ªô phim: {film_title}")

